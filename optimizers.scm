(define (make-sgd-optimizer lr module)
  (let ((params (module:get-params module)))
    (lambda ()
      (letrec ((loop (lambda (i)
		       (if (< i (length params))
			   (let ((param (list-ref params i)))
			     (param:set-weight! param (- (param:get-weight param) (* lr (param:get-grad param))))
			     (loop (+ i 1)))))))
	(loop 0)))))

(load "load.scm")
(define (train)
  (letrec* (
	    (test-module (module:join! (module-fc 2 20) (module-fc 20 1)))
	    (data '(((1 0) 1) ((0 0) 0) ((0 1) 1) ((1 1) 0)))
	    (expected (make-neuron-controllable))
	    (loss-module (loss:mse test-module (list (cadr expected))))
	    (opt (make-sgd-optimizer 0.01 loss-module))
	    (loop (lambda (i)
		    (if (< i 100000)
			(let* ((sample (list-ref data (random (length data))))
			       (x (car sample))
			       (y (cadr sample)))
			  (module:reset! loss-module)
			  ((car expected) y)
			  (module:forward loss-module x)
			  (if (= (remainder i 1000) 0) (begin (pp (list 'output (module:forward test-module x)))
							      (pp (list 'expected y))
							      ;;(pp (list 'weights (map param:get-weight (module:get-params loss-module))))
							      (pp (list 'loss (module:forward loss-module x)))))
			  (module:backward! loss-module (list -1))
					;(pp (list "grads" (module:get-param-grads loss-module)))
			  ;;(pp "")
			  (opt)
			  (loop (+ i 1)))))))

    (loop 0)))
(train)

